package uk.gov.nationalarchives.notifications

import uk.gov.nationalarchives.notifications.decoders.MalwareScanThreatFoundEventDecoder._

class MalwareScanThreatFoundEventSpec extends LambdaIntegrationSpec {

  private lazy val threatFoundEvent = MalwareScanThreatFoundEvent(Detail(
    S3ObjectDetails("aBucketName", "aBucketKey"),
    ScanResultDetails("THREAT_FOUND")
  ))

  override lazy val events: Seq[Event] = Seq(
    Event(
      description = "a malware threat found event",
      input = eventInputText(),
      expectedOutput = ExpectedOutput(
        slackMessage = Some(SlackMessage(expectedSlackMessage(threatFoundEvent), "/webhook-url"))
      )
    )
  )

  private def eventInputText(): String = {
    val s3ObjectDetails = s"""{\\"bucketName\\":\\"aBucketName\\",\\"objectKey\\":\\"aBucketKey\\"}"""
    val scanResultDetails = s"""{\\"scanResultStatus\\":\\"THREATS_FOUND\\"}"""

    s"""
       |{
       |  "Records": [
       |    {
       |      "Sns": {
       |        "Message": "{\\"detail\\":{\\"s3ObjectDetails\\":$s3ObjectDetails,\\"scanResultDetails\\":$scanResultDetails}}"
       |      }
       |    }
       |  ]
       |}
       |""".stripMargin
  }

  private def expectedSlackMessage(event: MalwareScanThreatFoundEvent): String = {
    val bucketName: String = event.detail.s3ObjectDetails.bucketName
    val objectKey: String = event.detail.s3ObjectDetails.objectKey

    s"""{
       |  "blocks": [
       |    {
       |      "type": "section",
       |      "text": {
       |        "type": "mrkdwn",
       |        "text": ":warning: *Malware Threat Found*\\n*Bucket Name*: $bucketName\\n*Object Key*: $objectKey"
       |      }
       |    }
       |  ]
       |}
       |""".stripMargin
  }
}
